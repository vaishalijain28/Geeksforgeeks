Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string that reads the same backward. More formally, S is a palindrome if reverse(S) = S. In case of conflict, return the substring which occurs first ( with the least starting index).
You don't need to read input or print anything. Your task is to complete the function longestPalin() which takes the string S as input and returns the longest palindromic substring of S.



//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String S = read.readLine();
            
            Solution ob = new Solution();
            System.out.println(ob.longestPalin(S));
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution{
    static String longestPalin(String S){
        // code here
        int length = 0;
        String ans = "";
        for(int i=0; i<S.length(); i++){
            int l = i, r = i;
            while(l>=0 && r<S.length() && S.charAt(l) == S.charAt(r)){
                if(r-l+1 > length){
                    ans = S.substring(l, r+1);
                    length = r-l+1;
                }
                l--;
                r++;
            }
            l = i; r = i+1;
            while(l>=0 && r<S.length() && S.charAt(l) == S.charAt(r)){
                if(r-l+1 > length){
                    ans = S.substring(l, r+1);
                    length = r-l+1;
                }
                l--;
                r++;
            }
        }
        return ans;
    }
}
